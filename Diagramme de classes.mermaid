classDiagram
    %% Search Service
    class SearchController {
        +List<Flight> searchFlights(String departure, String destination, LocalDate date)
    }
    class SearchService {
        +List<Flight> searchFlights(String departure, String destination, LocalDate date)
    }
    class SearchRepository {
        +List<Flight> findByCriteria(String departure, String destination, LocalDate date)
    }
    SearchController --> SearchService
    SearchService --> SearchRepository

    %% Flight Service
    class FlightController {
        +List<Flight> getAllFlights()
        +Flight getFlightById(Long id)
    }
    class FlightService {
        +List<Flight> findAll()
        +Flight findById(Long id)
    }
    class FlightRepository {
        +List<Flight> findAll()
        +Optional<Flight> findById(Long id)
    }
    FlightController --> FlightService
    FlightService --> FlightRepository

    %% Pricing Service
    class PricingController {
        +Float getPrice(Long flightId, LocalDate date)
    }
    class PricingService {
        +Float getPrice(Long flightId, LocalDate date)
    }
    class PricingRepository {
        +Optional<Pricing> findByFlightIdAndDate(Long flightId, LocalDate date)
    }
    PricingController --> PricingService
    PricingService --> PricingRepository

    %% Inventory Service
    class InventoryController {
        +int getAvailableSeats(Long flightId)
        +void updateInventory(Long flightId, int delta)
    }
    class InventoryService {
        +int getAvailableSeats(Long flightId)
        +void updateInventory(Long flightId, int delta)
    }
    class InventoryRepository {
        +SeatInventory findByFlightId(Long flightId)
        +SeatInventory save(SeatInventory seatInventory)
    }
    InventoryController --> InventoryService
    InventoryService --> InventoryRepository

    %% Reservation Service
    class ReservationController {
        +ReservationDto createReservation(ReservationRequest req)
        +void cancelReservation(Long id)
        +Reservation getReservationById(Long id)
        +List<Reservation> getAllReservations()
    }
    class ReservationService {
        +Reservation createReservation(ReservationRequest reservationRequest)
        +void cancelReservation(Long id)
        +Reservation getReservationById(Long id)
        +List<Reservation> getAllReservations()
    }
    class ReservationRepository {
        +Reservation save(Reservation r)
        +Optional<Reservation> findById(Long id)
    }
    ReservationController --> ReservationService
    ReservationService --> ReservationRepository

    %% Payment Service
    class PaymentController {
        +PaymentDto pay(Long reservationId, PaymentDetails details)
    }
    class PaymentService {
        +Payment processPayment(Long reservationId, PaymentDetails details)
    }
    class PaymentRepository {
        +Payment save(Payment p)
    }
    PaymentController --> PaymentService
    PaymentService --> PaymentRepository

    %% Check-in Service
    class CheckInController {
        +CheckInDto checkIn(Long reservationId)
    }
    class CheckInService {
        +CheckIn performCheckIn(Long reservationId)
    }
    class CheckInRepository {
        +CheckIn save(CheckIn ci)
    }
    CheckInController --> CheckInService
    CheckInService --> CheckInRepository

    %% Boarding Service
    class BoardingController {
        +BoardingDto board(Long checkInId)
    }
    class BoardingService {
        +Boarding performBoarding(Long checkInId)
    }
    class BoardingRepository {
        +Boarding save(Boarding b)
    }
    BoardingController --> BoardingService
    BoardingService --> BoardingRepository

    %% Seating Service
    class SeatingController {
        +SeatingDto assignSeat(Long passengerId, String seatClass)
    }
    class SeatingService {
        +Seating allocateSeat(Long passengerId, String seatClass)
    }
    class SeatingRepository {
        +Seating save(Seating s)
    }
    SeatingController --> SeatingService
    SeatingService --> SeatingRepository

    %% Baggage Service
    class BaggageController {
        +BaggageDto registerBaggage(Long passengerId, BaggageRequest req)
    }
    class BaggageService {
        +Baggage tagBaggage(Long passengerId, BaggageRequest req)
    }
    class BaggageRepository {
        +Baggage save(Baggage b)
    }
    BaggageController --> BaggageService
    BaggageService --> BaggageRepository

    %% Client Service
    class ClientController {
        +ClientDto createClient(ClientDto createClientRequest)
        +ClientDto getClientById(Long id)
        +List<ClientDto> getAllClients()
    }
    class ClientService {
        +Client createClient(ClientDto createClientRequest)
        +Client findById(Long id)
        +List<Client> findAll()
    }
    class ClientRepository {
        +Optional<Client> findClientById(Long id)
    }
    ClientController --> ClientService
    ClientService --> ClientRepository

    %% Reference Data Service
    class ReferenceController {
        +List<Country> getCountries()
        +List<City> getCities(String countryCode)
    }
    class ReferenceService {
        +List<Country> listCountries()
        +List<City> listCities(String countryCode)
    }
    class ReferenceRepository {
        +List<Country> findAll()
        +List<City> findByCountryCode(String code)
    }
    ReferenceController --> ReferenceService
    ReferenceService --> ReferenceRepository

    %% Accounting Service
    class AccountingController {
        +List<AccountingEntry> getEntries(Long flightId)
    }
    class AccountingService {
        +void recordEntry(AccountingEntry entry)
        +List<AccountingEntry> listEntries(Long flightId)
    }
    class AccountingRepository {
        +AccountingEntry save(AccountingEntry e)
        +List<AccountingEntry> findByFlightId(Long flightId)
    }
    AccountingController --> AccountingService
    AccountingService --> AccountingRepository

    %% Data Analysis Service
    class DataAnalysisController {
        +ReportDto generateReport(ReportRequest req)
    }
    class DataAnalysisService {
        +Report analyzeData(ReportRequest req)
    }
    class DataAnalysisRepository {
        +Report save(Report r)
    }
    DataAnalysisController --> DataAnalysisService
    DataAnalysisService --> DataAnalysisRepository

    %% Notification Service
    class NotificationController {
        +void sendNotification(NotificationRequest req)
    }
    class NotificationService {
        +void notifyCustomer(NotificationRequest req)
    }
    class NotificationRepository {
        +NotificationLog save(NotificationLog log)
    }
    NotificationController --> NotificationService

    %% Entities
    class Flight {
        +Long flightId
        +String departureAirport
        +String arrivalAirport
        +LocalDateTime departureTime
        +LocalDateTime arrivalTime
        +Long aircraftId
    }

    class Aircraft {
        +Long aircraftId
	+String modelName
        +int totalSeats
    }
    
    class Pricing {
        +Long pricingId
        +Long flightId
	    +LocalDate date
        +Float price
    }
    class SeatInventory {
        +Long seatInventoryId
        +Long FlightId
        +int totalSeats
        +int availableSeats
    }
    class Reservation {
        +Long reservationId
        +Long flightId
        +Long clientId
        +LocalDateTime reservationDate
    }
    class Payment {
        +Long paymentId
        +Long reservationId
        +Float amount
        +LocalDateTime paymentDate
    }
    class CheckIn {
        +Long checkInId
        +Long reservationId
        +LocalDateTime checkInTime
        +String boardingPassNumber
        +String seatNumber
    }
    class Boarding {
        +Long boardingId
        +Long checkInId
        +LocalDateTime boardingTime
        +String gateNumber
    }
    class Seating {
        +Long seatingId
        +Long reservationId
        +String seatNumber
    }
    class Baggage {
        +Long baggageId
        +Long reservationId
        +Float weight
    }
    class Client {
        +Long clientId
        +String firstName
        +String lastName
        +String email
        +String phone
        +String passportNumber
    }
    class Country {
        +String code
        +String name
    }
    class City {
        +Long cityId
        +String name
        +String countryCode
    }
    class Airport {
        +Long id
        +Strong code
        +String name
        +Long cityId
    }
    class AccountingEntry {
        +Long entryId
        +Long flightId
        +LocalDateTime entryDate
        +Float amount
        +String description
    }
    class DataAnalysisReport {
        +Long reportId
        +String reportType
        +LocalDateTime generatedAt
        +String content
    }
    class NotificationLog {
        +Long logId
        +Long reservationId
        +String eventType
        +String recipient
        +LocalDateTime sentAt
        +String status
    }

    %% Link Entities to Services
    FlightService --> Flight
    FlightRepository --|> Flight
    FlightService --> Aircraft
    FlightRepository --|> Aircraft
    FlightService --> Airport
    FlightRepository --|> Airport

    PricingService --> Pricing
    PricingRepository --|> Pricing

    InventoryService --> SeatInventory
    InventoryRepository --|> SeatInventory

    ReservationService --> Reservation
    ReservationRepository --|> Reservation

    ReservationService --> Passenger
    ReservationRepository --|> Passenger

    PaymentService --> Payment
    PaymentRepository --|> Payment

    CheckInService --> CheckIn
    CheckInRepository --|> CheckIn

    BoardingService --> Boarding
    BoardingRepository --|> Boarding

    SeatingService --> Seating
    SeatingRepository --|> Seating

    BaggageService --> Baggage
    BaggageRepository --|> Baggage

    ClientService --> Client
    ClientRepository --|> Client

    ReferenceService --> Country
    ReferenceService --> City
    ReferenceRepository --|> Country
    ReferenceRepository --|> City

    AccountingService --> AccountingEntry
    AccountingRepository --|> AccountingEntry

    DataAnalysisService --> DataAnalysisReport
    DataAnalysisRepository --|> DataAnalysisReport

    NotificationService --> NotificationLog
    NotificationRepository --|> NotificationLog
